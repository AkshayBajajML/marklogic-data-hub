plugins {
    id 'net.saliman.properties' version '1.4.4'
    id 'com.marklogic.ml-gradle' version '2.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
}

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://developer.marklogic.com/maven2/' }
}

group   = 'com.marklogic'

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    compile 'org.springframework.batch:spring-batch-core:3.0.6.RELEASE'
    compile 'com.marklogic:marklogic-xcc:8.0.4.2'
    compile 'com.marklogic:java-client-api:3.0.4'
    compile 'com.marklogic:ml-javaclient-util:2.6.1'
    compile 'com.marklogic:ml-app-deployer:2.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-csv:1.2'
    compile("com.marklogic:mlcp:8.0-4") {
        exclude module : 'servlet-api'
        exclude group: 'com.google.guava', module: 'guava'
    }
    compile 'com.google.guava:guava:11.0.2'
    testCompile 'org.springframework.batch:spring-batch-test:3.0.6.RELEASE'
    testCompile 'junit:junit:4.12'
    testCompile 'xmlunit:xmlunit:1.3'
    testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
   options.overview = "src/main/resources/overview.html"
}

Node pomCustomizations = new NodeBuilder(). project {
        name 'hub-in-a-box'
        packaging 'jar'
        textdescription 'Library for Creating an Enterprise Data Hub on MarkLogic'
        url 'https://github.com/marklogic/hub-in-a-box'

        scm {
            url 'git@github.com:marklogic/hub-in-a-box.git'
                connection 'scm:git@github.com:marklogic/hub-in-a-box.git'
                developerConnection 'scm:git@github.com:marklogic/hub-in-a-box.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                name 'MarkLogic'
                    email 'java-sig@marklogic.com'
                    organization 'MarkLogic'
                    organizationUrl 'https://www.marklogic.com'
            }
            developer {
                name 'MarkLogic Github Contributors'
                    email 'general@developer.marklogic.com'
                    organization 'Github Contributors'
                    organizationUrl 'https://github.com/marklogic/hub-in-a-box/graphs/contributors'
            }
        }
}

publishing {
  publications {
    mainJava(MavenPublication) {
      from components.java

      pom.withXml {
        asNode().append(pomCustomizations.developers)
        asNode().append(pomCustomizations.name)
        asNode().append(pomCustomizations.packaging)
        asNode().append(pomCustomizations.url)
        asNode().append(pomCustomizations.scm)
        asNode().append(pomCustomizations.licenses)
        asNode().appendNode("description", pomCustomizations.textdescription.text)
      }

      artifact sourcesJar

      artifact javadocJar

    }
  }
  repositories {
    maven {
      url publishUrl
    }
  }
}

ext {
    mlAppConfig {
        modulePaths = ["data-hub/src/main/resources/ml-modules"]
        // mlConfigDir = "data-hub/src/main/resources/ml-config"
    }

    // don't deploy the content database
    cmd = mlAppDeployer.getCommand("DeployContentDatabasesCommand")
    index = mlAppDeployer.commands.indexOf(cmd)
    mlAppDeployer.commands.remove(cmd)
    mlDatabaseCommands.remove(cmd)

    def stagingDbCommand = new com.marklogic.appdeployer.command.databases.DeployDatabaseCommand("staging-database.json")
    stagingDbCommand.setForestsPerHost(3);
    mlAppDeployer.commands.add(index, stagingDbCommand)
    mlDatabaseCommands.add(stagingDbCommand)

    def finalDbCommand = new com.marklogic.appdeployer.command.databases.DeployDatabaseCommand("final-database.json")
    finalDbCommand.setForestsPerHost(3);
    mlAppDeployer.commands.add(index + 1, finalDbCommand)
    mlDatabaseCommands.add(finalDbCommand)

    println(mlAppDeployer.commands.toString())
    println("")
    println("")
    println(mlDatabaseCommands.toString())


}
